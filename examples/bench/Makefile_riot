WARN_UNUSED_SWAP ?= 1
INJECT_FOR_SWAP ?= 1
USE_SHELL ?= 1
USE_WAMR_ENV_THREAD ?= 0
USE_WAMR_ENV ?= 0


APPLICATION = wasm-example
BOARD ?= arduino-nano-33-ble
#BOARD ?= esp32-wroom-32


BASE_DIR ?= ../../../..
RIOTBASE ?= $(BASE_DIR)/dependencies/RIOT
SWITCH_INJECTION_TOOL ?= $(BASE_DIR)/src/elf-reader/reader.py 
CUST_MODULE_DIR ?=$(BASE_DIR)/src/modules
SCRIPTS_DIRS += $(BASE_DIR)/scripts


EXTERNAL_MODULE_DIRS += $(CUST_MODULE_DIR)
USEPKG += wamr

USEMODULE += ztimer ztimer_sec benchmark

ifeq ($(USE_SHELL), 1)
  USEMODULE += shell ps shell_cmds_default
endif
ifeq ($(USE_WAMR_ENV_THREAD), 1)
  USEMODULE += sched_round_robin wamr_env_thread ztimer ztimer_sec
endif
ifeq ($(USE_WAMR_ENV), 1)
  USEMODULE += wamr_env
endif

ifeq ($(INJECT_FOR_SWAP), 1)
  INJECT_COMMAND = python3 $(SWITCH_INJECTION_TOOL) --elf $(ELFFILE) --wamr $(RIOTBASE)/build/pkg/wamr/
else
  INJECT_COMMAND =  
endif
 
export WAMR_CONFIG := $(abspath config.cmake)

CFLAGS += -DTHREAD_STACKSIZE_MAIN='(5 * 1024)' -Wno-unused-parameter -Wno-unused-variable -DSCHED_RR_TIMEOUT=500

# Comment this out to disable code in RIOT that does safety checking
# which is not needed in a production environment but helps in the
# development process:
DEVELHELP ?= 0

# Change this to 0 show compiler invocation lines by default:
QUIET ?= 1


.PHONY: all compile_wasm_module

all: check_warn compile_wasm_module
#	make update-elf

clean: clean-wasm

clean-wasm: 
	$(MAKE) -C wasm clean

compile_wasm_module:
	$(MAKE) -C wasm

update-elf:
	$(INJECT_COMMAND)

update-bin: 
	$(Q)$(OBJCOPY) $(OFLAGS) -Obinary $(ELFFILE) $(BINFILE)
	echo ESPTOOL: $(ESPTOOL)
	$(Q)$(ESPTOOL) --chip $(FLASH_CHIP) elf2image --flash_mode $(FLASH_MODE) \
		--flash_size $(FLASH_SIZE)MB --flash_freq $(FLASH_FREQ) $(FLASH_OPTS) \
		-o $(ELFFILE).bin $(ELFFILE)


check_warn:
	@[ $(WARN_UNUSED_SWAP) -eq 1 ] && \
		echo "\nSWAP is not used !\nUse 'make build ...' to enable swapping or set WARN_UNUSED_SWAP env variable to 0." && exit 2 || true

build: WARN_UNUSED_SWAP=0
build: all update-elf update-bin

bench-speed: build flash-only
#	 $(TERMPROG) $(TERMFLAGS) | xargs -L1 echo "a"
	python3 $(SCRIPTS_DIRS)/evaluate_log_benchmark.py $(BAUD) $(PORT)

bench-size: build
#	 $(TERMPROG) $(TERMFLAGS) | xargs -L1 echo "a"
	python3 $(SCRIPTS_DIRS)/evaluate_size.py $(ELFFILE) -c module $(CUST_MODULE_DIR) -c example $(APPDIR) -c wamr $(RIOTBASE)/build/pkg/wamr

info:
	echo $(CPU_CORE) $(CPU_FAM) $(CPU_MODEL) $(CPU_ARCH) $(CPU) $(RIOTCPU) $(TARGET_ARCH) $(TARGET_ARCH_CORTEXM) $(TARGET_ARCH_LLVM) $(RUST_TARGET)

#run: build flash-only term
run: build flash term

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #
# Load the rest of the usual RIOT make infrastructure #
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #

include $(RIOTBASE)/Makefile.include
